"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("tslib"),t=require("@descope/core-js-sdk"),s=require("jose"),o=require("cross-fetch");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=n(t);var r;null!==(r=globalThis.Headers)&&void 0!==r||(globalThis.Headers=o.Headers);const i=(...e)=>(e.forEach((e=>{var t,s;e&&"object"==typeof e&&(null!==(t=(s=e).highWaterMark)&&void 0!==t||(s.highWaterMark=31457280))})),o.fetch(...e)),p=t=>async(...s)=>{var o,n,a;const r=await t(...s);if(!r.data)return r;let i=r.data,{refreshJwt:p}=i,l=e.__rest(i,["refreshJwt"]);const m=[];var d;return p?m.push(`${"DSR"}=${p}; Domain=${(null==(d=l)?void 0:d.cookieDomain)||""}; Max-Age=${(null==d?void 0:d.cookieMaxAge)||""}; Path=${(null==d?void 0:d.cookiePath)||"/"}; HttpOnly; SameSite=Strict`):(null===(o=r.response)||void 0===o?void 0:o.headers.get("set-cookie"))&&(p=((e,t)=>{const s=null==e?void 0:e.match(RegExp(`(?:^|;\\s*)${t}=([^;]*)`));return s?s[1]:null})(null===(n=r.response)||void 0===n?void 0:n.headers.get("set-cookie"),"DSR"),m.push(null===(a=r.response)||void 0===a?void 0:a.headers.get("set-cookie"))),Object.assign(Object.assign({},r),{data:Object.assign(Object.assign({},r.data),{refreshJwt:p,cookies:m})})};function l(e,t,s){var o,n;const a=s?null===(n=null===(o=e.token.tenants)||void 0===o?void 0:o[s])||void 0===n?void 0:n[t]:e.token[t];return Array.isArray(a)?a:[]}function m(e,t){var s;return!!(null===(s=e.token.tenants)||void 0===s?void 0:s[t])}var d={create:"/v1/mgmt/user/create",createTestUser:"/v1/mgmt/user/create/test",createBatch:"/v1/mgmt/user/create/batch",update:"/v1/mgmt/user/update",patch:"/v1/mgmt/user/patch",delete:"/v1/mgmt/user/delete",deleteAllTestUsers:"/v1/mgmt/user/test/delete/all",load:"/v1/mgmt/user",logout:"/v1/mgmt/user/logout",search:"/v2/mgmt/user/search",searchTestUsers:"/v2/mgmt/user/search/test",getProviderToken:"/v1/mgmt/user/provider/token",updateStatus:"/v1/mgmt/user/update/status",updateLoginId:"/v1/mgmt/user/update/loginid",updateEmail:"/v1/mgmt/user/update/email",updatePhone:"/v1/mgmt/user/update/phone",updateDisplayName:"/v1/mgmt/user/update/name",updatePicture:"/v1/mgmt/user/update/picture",updateCustomAttribute:"/v1/mgmt/user/update/customAttribute",setRole:"/v1/mgmt/user/update/role/set",addRole:"/v2/mgmt/user/update/role/add",removeRole:"/v1/mgmt/user/update/role/remove",setSSOApps:"/v1/mgmt/user/update/ssoapp/set",addSSOApps:"/v1/mgmt/user/update/ssoapp/add",removeSSOApps:"/v1/mgmt/user/update/ssoapp/remove",addTenant:"/v1/mgmt/user/update/tenant/add",removeTenant:"/v1/mgmt/user/update/tenant/remove",setPassword:"/v1/mgmt/user/password/set",setTemporaryPassword:"/v1/mgmt/user/password/set/temporary",setActivePassword:"/v1/mgmt/user/password/set/active",expirePassword:"/v1/mgmt/user/password/expire",removeAllPasskeys:"/v1/mgmt/user/passkeys/delete",generateOTPForTest:"/v1/mgmt/tests/generate/otp",generateMagicLinkForTest:"/v1/mgmt/tests/generate/magiclink",generateEnchantedLinkForTest:"/v1/mgmt/tests/generate/enchantedlink",generateEmbeddedLink:"/v1/mgmt/user/signin/embeddedlink",history:"/v1/mgmt/user/history"},c={updateName:"/v1/mgmt/project/update/name",updateTags:"/v1/mgmt/project/update/tags",clone:"/v1/mgmt/project/clone",projectsList:"/v1/mgmt/projects/list",exportSnapshot:"/v1/mgmt/project/snapshot/export",importSnapshot:"/v1/mgmt/project/snapshot/import",validateSnapshot:"/v1/mgmt/project/snapshot/validate"},u={create:"/v1/mgmt/accesskey/create",load:"/v1/mgmt/accesskey",search:"/v1/mgmt/accesskey/search",update:"/v1/mgmt/accesskey/update",deactivate:"/v1/mgmt/accesskey/deactivate",activate:"/v1/mgmt/accesskey/activate",delete:"/v1/mgmt/accesskey/delete"},g={create:"/v1/mgmt/tenant/create",update:"/v1/mgmt/tenant/update",delete:"/v1/mgmt/tenant/delete",load:"/v1/mgmt/tenant",settings:"/v1/mgmt/tenant/settings",loadAll:"/v1/mgmt/tenant/all",searchAll:"/v1/mgmt/tenant/search",generateSSOConfigurationLink:"/v1/mgmt/tenant/adminlinks/sso/generate"},h={oidcCreate:"/v1/mgmt/sso/idp/app/oidc/create",samlCreate:"/v1/mgmt/sso/idp/app/saml/create",oidcUpdate:"/v1/mgmt/sso/idp/app/oidc/update",samlUpdate:"/v1/mgmt/sso/idp/app/saml/update",delete:"/v1/mgmt/sso/idp/app/delete",load:"/v1/mgmt/sso/idp/app/load",loadAll:"/v1/mgmt/sso/idp/apps/load"},v={settings:"/v1/mgmt/sso/settings",metadata:"/v1/mgmt/sso/metadata",mapping:"/v1/mgmt/sso/mapping",settingsv2:"/v2/mgmt/sso/settings",oidc:{configure:"/v1/mgmt/sso/oidc"},saml:{configure:"/v1/mgmt/sso/saml",metadata:"/v1/mgmt/sso/saml/metadata"}},f={update:"/v1/mgmt/jwt/update",impersonate:"/v1/mgmt/impersonate"},k={settings:"/v1/mgmt/password/settings"},R={create:"/v1/mgmt/permission/create",update:"/v1/mgmt/permission/update",delete:"/v1/mgmt/permission/delete",loadAll:"/v1/mgmt/permission/all"},C={create:"/v1/mgmt/role/create",update:"/v1/mgmt/role/update",delete:"/v1/mgmt/role/delete",loadAll:"/v1/mgmt/role/all",search:"/v1/mgmt/role/search"},y={list:"/v1/mgmt/flow/list",delete:"/v1/mgmt/flow/delete",export:"/v1/mgmt/flow/export",import:"/v1/mgmt/flow/import"},I={export:"/v1/mgmt/theme/export",import:"/v1/mgmt/theme/import"},b={loadAllGroups:"/v1/mgmt/group/all",loadAllGroupsForMember:"/v1/mgmt/group/member/all",loadAllGroupMembers:"/v1/mgmt/group/members"},w={search:"/v1/mgmt/audit/search",createEvent:"/v1/mgmt/audit/event"},A={schemaSave:"/v1/mgmt/authz/schema/save",schemaDelete:"/v1/mgmt/authz/schema/delete",schemaLoad:"/v1/mgmt/authz/schema/load",nsSave:"/v1/mgmt/authz/ns/save",nsDelete:"/v1/mgmt/authz/ns/delete",rdSave:"/v1/mgmt/authz/rd/save",rdDelete:"/v1/mgmt/authz/rd/delete",reCreate:"/v1/mgmt/authz/re/create",reDelete:"/v1/mgmt/authz/re/delete",reDeleteResources:"/v1/mgmt/authz/re/deleteresources",hasRelations:"/v1/mgmt/authz/re/has",who:"/v1/mgmt/authz/re/who",resource:"/v1/mgmt/authz/re/resource",targets:"/v1/mgmt/authz/re/targets",targetAll:"/v1/mgmt/authz/re/targetall",getModified:"/v1/mgmt/authz/getmodified"};const S=(e,s)=>({create:function(o,n,a,r,i,p,l,m,c,u,g,h,v,f){const k="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:g,middleName:h,familyName:v,roleNames:i,userTenants:p,customAttributes:l,picture:m,verifiedEmail:c,verifiedPhone:u,additionalLoginIds:f}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0});return t.transformResponse(e.httpClient.post(d.create,k,{token:s}),(e=>e.user))},createTestUser:function(o,n,a,r,i,p,l,m,c,u,g,h,v,f){const k="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:g,middleName:h,familyName:v,roleNames:i,userTenants:p,customAttributes:l,picture:m,verifiedEmail:c,verifiedPhone:u,additionalLoginIds:f,test:!0}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0,test:!0});return t.transformResponse(e.httpClient.post(d.createTestUser,k,{token:s}),(e=>e.user))},invite:function(o,n,a,r,i,p,l,m,c,u,g,h,v,f,k,R,C){const y="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:f,middleName:k,familyName:R,roleNames:i,userTenants:p,invite:!0,customAttributes:l,picture:m,verifiedEmail:c,verifiedPhone:u,inviteUrl:g,sendMail:h,sendSMS:v,additionalLoginIds:C}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0,invite:!0});return t.transformResponse(e.httpClient.post(d.create,y,{token:s}),(e=>e.user))},inviteBatch:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(d.createBatch,{users:o.map((e=>{const t=Object.assign(Object.assign({},e),{roleNames:e.roles});return delete t.roles,t})),invite:!0,inviteUrl:n,sendMail:a,sendSMS:r,templateOptions:i},{token:s}),(e=>e)),update:function(o,n,a,r,i,p,l,m,c,u,g,h,v,f){const k="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:g,middleName:h,familyName:v,roleNames:i,userTenants:p,customAttributes:l,picture:m,verifiedEmail:c,verifiedPhone:u,additionalLoginIds:f}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0});return t.transformResponse(e.httpClient.post(d.update,k,{token:s}),(e=>e.user))},patch:function(o,n){const a={loginId:o};return void 0!==n.email&&(a.email=n.email),void 0!==n.phone&&(a.phone=n.phone),void 0!==n.displayName&&(a.displayName=n.displayName),void 0!==n.givenName&&(a.givenName=n.givenName),void 0!==n.middleName&&(a.middleName=n.middleName),void 0!==n.familyName&&(a.familyName=n.familyName),void 0!==n.roles&&(a.roleNames=n.roles),void 0!==n.userTenants&&(a.userTenants=n.userTenants),void 0!==n.customAttributes&&(a.customAttributes=n.customAttributes),void 0!==n.picture&&(a.picture=n.picture),void 0!==n.verifiedEmail&&(a.verifiedEmail=n.verifiedEmail),void 0!==n.verifiedPhone&&(a.verifiedPhone=n.verifiedPhone),void 0!==n.ssoAppIds&&(a.ssoAppIds=n.ssoAppIds),t.transformResponse(e.httpClient.patch(d.patch,a,{token:s}),(e=>e.user))},delete:o=>t.transformResponse(e.httpClient.post(d.delete,{loginId:o},{token:s})),deleteByUserId:o=>t.transformResponse(e.httpClient.post(d.delete,{userId:o},{token:s})),deleteAllTestUsers:()=>t.transformResponse(e.httpClient.delete(d.deleteAllTestUsers,{token:s})),load:o=>t.transformResponse(e.httpClient.get(d.load,{queryParams:{loginId:o},token:s}),(e=>e.user)),loadByUserId:o=>t.transformResponse(e.httpClient.get(d.load,{queryParams:{userId:o},token:s}),(e=>e.user)),logoutUser:o=>t.transformResponse(e.httpClient.post(d.logout,{loginId:o},{token:s})),logoutUserByUserId:o=>t.transformResponse(e.httpClient.post(d.logout,{userId:o},{token:s})),searchAll:(o,n,a,r,i,p,l,m,c,u)=>t.transformResponse(e.httpClient.post(d.search,{tenantIds:o,roleNames:n,limit:a,page:r,testUsersOnly:i,withTestUser:p,customAttributes:l,statuses:m,emails:c,phones:u},{token:s}),(e=>e.users)),searchTestUsers:o=>t.transformResponse(e.httpClient.post(d.searchTestUsers,Object.assign(Object.assign({},o),{withTestUser:!0,testUsersOnly:!0,roleNames:o.roles,roles:void 0}),{token:s}),(e=>e.users)),search:o=>t.transformResponse(e.httpClient.post(d.search,Object.assign(Object.assign({},o),{roleNames:o.roles,roles:void 0}),{token:s}),(e=>e.users)),getProviderToken:(o,n,a)=>t.transformResponse(e.httpClient.get(d.getProviderToken,{queryParams:{loginId:o,provider:n,withRefreshToken:(null==a?void 0:a.withRefreshToken)?"true":"false",forceRefresh:(null==a?void 0:a.forceRefresh)?"true":"false"},token:s}),(e=>e)),activate:o=>t.transformResponse(e.httpClient.post(d.updateStatus,{loginId:o,status:"enabled"},{token:s}),(e=>e.user)),deactivate:o=>t.transformResponse(e.httpClient.post(d.updateStatus,{loginId:o,status:"disabled"},{token:s}),(e=>e.user)),updateLoginId:(o,n)=>t.transformResponse(e.httpClient.post(d.updateLoginId,{loginId:o,newLoginId:n},{token:s}),(e=>e.user)),updateEmail:(o,n,a)=>t.transformResponse(e.httpClient.post(d.updateEmail,{loginId:o,email:n,verified:a},{token:s}),(e=>e.user)),updatePhone:(o,n,a)=>t.transformResponse(e.httpClient.post(d.updatePhone,{loginId:o,phone:n,verified:a},{token:s}),(e=>e.user)),updateDisplayName:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(d.updateDisplayName,{loginId:o,displayName:n,givenName:a,middleName:r,familyName:i},{token:s}),(e=>e.user)),updatePicture:(o,n)=>t.transformResponse(e.httpClient.post(d.updatePicture,{loginId:o,picture:n},{token:s}),(e=>e.user)),updateCustomAttribute:(o,n,a)=>t.transformResponse(e.httpClient.post(d.updateCustomAttribute,{loginId:o,attributeKey:n,attributeValue:a},{token:s}),(e=>e.user)),setRoles:(o,n)=>t.transformResponse(e.httpClient.post(d.setRole,{loginId:o,roleNames:n},{token:s}),(e=>e.user)),addRoles:(o,n)=>t.transformResponse(e.httpClient.post(d.addRole,{loginId:o,roleNames:n},{token:s}),(e=>e.user)),removeRoles:(o,n)=>t.transformResponse(e.httpClient.post(d.removeRole,{loginId:o,roleNames:n},{token:s}),(e=>e.user)),addTenant:(o,n)=>t.transformResponse(e.httpClient.post(d.addTenant,{loginId:o,tenantId:n},{token:s}),(e=>e.user)),removeTenant:(o,n)=>t.transformResponse(e.httpClient.post(d.removeTenant,{loginId:o,tenantId:n},{token:s}),(e=>e.user)),setTenantRoles:(o,n,a)=>t.transformResponse(e.httpClient.post(d.setRole,{loginId:o,tenantId:n,roleNames:a},{token:s}),(e=>e.user)),addTenantRoles:(o,n,a)=>t.transformResponse(e.httpClient.post(d.addRole,{loginId:o,tenantId:n,roleNames:a},{token:s}),(e=>e.user)),removeTenantRoles:(o,n,a)=>t.transformResponse(e.httpClient.post(d.removeRole,{loginId:o,tenantId:n,roleNames:a},{token:s}),(e=>e.user)),addSSOapps:(o,n)=>t.transformResponse(e.httpClient.post(d.addSSOApps,{loginId:o,ssoAppIds:n},{token:s}),(e=>e.user)),setSSOapps:(o,n)=>t.transformResponse(e.httpClient.post(d.setSSOApps,{loginId:o,ssoAppIds:n},{token:s}),(e=>e.user)),removeSSOapps:(o,n)=>t.transformResponse(e.httpClient.post(d.removeSSOApps,{loginId:o,ssoAppIds:n},{token:s}),(e=>e.user)),generateOTPForTestUser:(o,n,a)=>t.transformResponse(e.httpClient.post(d.generateOTPForTest,{deliveryMethod:o,loginId:n,loginOptions:a},{token:s}),(e=>e)),generateMagicLinkForTestUser:(o,n,a,r)=>t.transformResponse(e.httpClient.post(d.generateMagicLinkForTest,{deliveryMethod:o,loginId:n,URI:a,loginOptions:r},{token:s}),(e=>e)),generateEnchantedLinkForTestUser:(o,n,a)=>t.transformResponse(e.httpClient.post(d.generateEnchantedLinkForTest,{loginId:o,URI:n,loginOptions:a},{token:s}),(e=>e)),generateEmbeddedLink:(o,n)=>t.transformResponse(e.httpClient.post(d.generateEmbeddedLink,{loginId:o,customClaims:n},{token:s}),(e=>e)),setTemporaryPassword:(o,n)=>t.transformResponse(e.httpClient.post(d.setTemporaryPassword,{loginId:o,password:n},{token:s}),(e=>e)),setActivePassword:(o,n)=>t.transformResponse(e.httpClient.post(d.setActivePassword,{loginId:o,password:n},{token:s}),(e=>e)),setPassword:(o,n)=>t.transformResponse(e.httpClient.post(d.setPassword,{loginId:o,password:n},{token:s}),(e=>e)),expirePassword:o=>t.transformResponse(e.httpClient.post(d.expirePassword,{loginId:o},{token:s}),(e=>e)),removeAllPasskeys:o=>t.transformResponse(e.httpClient.post(d.removeAllPasskeys,{loginId:o},{token:s}),(e=>e)),history:o=>t.transformResponse(e.httpClient.post(d.history,o,{token:s}),(e=>e))}),N=(e,s)=>({updateName:o=>t.transformResponse(e.httpClient.post(c.updateName,{name:o},{token:s})),updateTags:o=>t.transformResponse(e.httpClient.post(c.updateTags,{tags:o},{token:s})),clone:(o,n,a)=>t.transformResponse(e.httpClient.post(c.clone,{name:o,environment:n,tags:a},{token:s})),listProjects:async()=>t.transformResponse(e.httpClient.post(c.projectsList,{},{token:s}),(e=>e.projects.map((({id:e,name:t,environment:s,tags:o})=>({id:e,name:t,environment:s,tags:o}))))),exportSnapshot:()=>t.transformResponse(e.httpClient.post(c.exportSnapshot,{},{token:s})),importSnapshot:o=>t.transformResponse(e.httpClient.post(c.importSnapshot,o,{token:s})),validateSnapshot:o=>t.transformResponse(e.httpClient.post(c.validateSnapshot,o,{token:s})),export:()=>t.transformResponse(e.httpClient.post(c.exportSnapshot,{},{token:s}),(e=>e.files)),import:o=>t.transformResponse(e.httpClient.post(c.importSnapshot,{files:o},{token:s}))}),O=(e,s)=>({create:(o,n,a)=>t.transformResponse(e.httpClient.post(g.create,{name:o,selfProvisioningDomains:n,customAttributes:a},{token:s})),createWithId:(o,n,a,r)=>t.transformResponse(e.httpClient.post(g.create,{id:o,name:n,selfProvisioningDomains:a,customAttributes:r},{token:s})),update:(o,n,a,r)=>t.transformResponse(e.httpClient.post(g.update,{id:o,name:n,selfProvisioningDomains:a,customAttributes:r},{token:s})),delete:(o,n)=>t.transformResponse(e.httpClient.post(g.delete,{id:o,cascade:n},{token:s})),load:o=>t.transformResponse(e.httpClient.get(g.load,{queryParams:{id:o},token:s}),(e=>e)),loadAll:()=>t.transformResponse(e.httpClient.get(g.loadAll,{token:s}),(e=>e.tenants)),searchAll:(o,n,a,r)=>t.transformResponse(e.httpClient.post(g.searchAll,{tenantIds:o,tenantNames:n,tenantSelfProvisioningDomains:a,customAttributes:r},{token:s}),(e=>e.tenants)),getSettings:o=>t.transformResponse(e.httpClient.get(g.settings,{queryParams:{id:o},token:s}),(e=>e)),configureSettings:(o,n)=>t.transformResponse(e.httpClient.post(g.settings,Object.assign(Object.assign({},n),{tenantId:o}),{token:s})),generateSSOConfigurationLink:(o,n)=>t.transformResponse(e.httpClient.post(g.generateSSOConfigurationLink,{tenantId:o,expireTime:n},{token:s}),(e=>e))}),j=(e,s)=>({update:(o,n)=>t.transformResponse(e.httpClient.post(f.update,{jwt:o,customClaims:n},{token:s})),impersonate:(o,n,a)=>t.transformResponse(e.httpClient.post(f.impersonate,{impersonatorId:o,loginId:n,validateConsent:a},{token:s}))}),T=(e,s)=>({create:(o,n)=>t.transformResponse(e.httpClient.post(R.create,{name:o,description:n},{token:s})),update:(o,n,a)=>t.transformResponse(e.httpClient.post(R.update,{name:o,newName:n,description:a},{token:s})),delete:o=>t.transformResponse(e.httpClient.post(R.delete,{name:o},{token:s})),loadAll:()=>t.transformResponse(e.httpClient.get(R.loadAll,{token:s}),(e=>e.permissions))}),P=(e,s)=>({create:(o,n,a,r)=>t.transformResponse(e.httpClient.post(C.create,{name:o,description:n,permissionNames:a,tenantId:r},{token:s})),update:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(C.update,{name:o,newName:n,description:a,permissionNames:r,tenantId:i},{token:s})),delete:(o,n)=>t.transformResponse(e.httpClient.post(C.delete,{name:o,tenantId:n},{token:s})),loadAll:()=>t.transformResponse(e.httpClient.get(C.loadAll,{token:s}),(e=>e.roles)),search:o=>t.transformResponse(e.httpClient.post(C.search,o,{token:s}),(e=>e.roles))}),E=(e,s)=>({loadAllGroups:o=>t.transformResponse(e.httpClient.post(b.loadAllGroups,{tenantId:o},{token:s})),loadAllGroupsForMember:(o,n,a)=>t.transformResponse(e.httpClient.post(b.loadAllGroupsForMember,{tenantId:o,loginIds:a,userIds:n},{token:s})),loadAllGroupMembers:(o,n)=>t.transformResponse(e.httpClient.post(b.loadAllGroupMembers,{tenantId:o,groupId:n},{token:s}))}),M=(e,s)=>({getSettings:o=>t.transformResponse(e.httpClient.get(v.settings,{queryParams:{tenantId:o},token:s}),(e=>e)),deleteSettings:o=>t.transformResponse(e.httpClient.delete(v.settings,{queryParams:{tenantId:o},token:s})),configureSettings:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(v.settings,{tenantId:o,idpURL:n,entityId:r,idpCert:a,redirectURL:i,domains:p},{token:s})),configureMetadata:(o,n,a,r)=>t.transformResponse(e.httpClient.post(v.metadata,{tenantId:o,idpMetadataURL:n,redirectURL:a,domains:r},{token:s})),configureMapping:(o,n,a)=>t.transformResponse(e.httpClient.post(v.mapping,{tenantId:o,roleMappings:n,attributeMapping:a},{token:s})),configureOIDCSettings:(o,n,a)=>{const r=Object.assign(Object.assign({},n),{userAttrMapping:n.attributeMapping});return delete r.attributeMapping,t.transformResponse(e.httpClient.post(v.oidc.configure,{tenantId:o,settings:r,domains:a},{token:s}))},configureSAMLSettings:(o,n,a,r)=>t.transformResponse(e.httpClient.post(v.saml.configure,{tenantId:o,settings:n,redirectUrl:a,domains:r},{token:s})),configureSAMLByMetadata:(o,n,a,r)=>t.transformResponse(e.httpClient.post(v.saml.metadata,{tenantId:o,settings:n,redirectUrl:a,domains:r},{token:s})),loadSettings:o=>t.transformResponse(e.httpClient.get(v.settingsv2,{queryParams:{tenantId:o},token:s}),(e=>{var t,s;const o=e;return o.oidc&&(o.oidc=Object.assign(Object.assign({},o.oidc),{attributeMapping:o.oidc.userAttrMapping}),delete o.oidc.userAttrMapping),(null===(t=o.saml)||void 0===t?void 0:t.groupsMapping)&&(o.saml.groupsMapping=null===(s=o.saml)||void 0===s?void 0:s.groupsMapping.map((e=>{const t=e;return t.roleName=t.role.name,delete t.role,t}))),o}))}),x=(e,s)=>({create:(o,n,a,r,i,p,l,m)=>t.transformResponse(e.httpClient.post(u.create,{name:o,expireTime:n,roleNames:a,keyTenants:r,userId:i,customClaims:p,description:l,permittedIps:m},{token:s})),load:o=>t.transformResponse(e.httpClient.get(u.load,{queryParams:{id:o},token:s}),(e=>e.key)),searchAll:o=>t.transformResponse(e.httpClient.post(u.search,{tenantIds:o},{token:s}),(e=>e.keys)),update:(o,n,a)=>t.transformResponse(e.httpClient.post(u.update,{id:o,name:n,description:a},{token:s}),(e=>e.key)),deactivate:o=>t.transformResponse(e.httpClient.post(u.deactivate,{id:o},{token:s})),activate:o=>t.transformResponse(e.httpClient.post(u.activate,{id:o},{token:s})),delete:o=>t.transformResponse(e.httpClient.post(u.delete,{id:o},{token:s}))}),U=(e,s)=>({list:()=>t.transformResponse(e.httpClient.post(y.list,{},{token:s})),delete:o=>t.transformResponse(e.httpClient.post(y.delete,{ids:o},{token:s})),export:o=>t.transformResponse(e.httpClient.post(y.export,{flowId:o},{token:s})),import:(o,n,a)=>t.transformResponse(e.httpClient.post(y.import,{flowId:o,flow:n,screens:a},{token:s}))}),L=(e,s)=>({export:()=>t.transformResponse(e.httpClient.post(I.export,{},{token:s})),import:o=>t.transformResponse(e.httpClient.post(I.import,{theme:o},{token:s}))}),D=(e,s)=>({search:o=>{const n=Object.assign(Object.assign({},o),{externalIds:o.loginIds});return delete n.loginIds,t.transformResponse(e.httpClient.post(w.search,n,{token:s}),(e=>null==e?void 0:e.audits.map((e=>{const t=Object.assign(Object.assign({},e),{occurred:parseFloat(e.occurred),loginIds:e.externalIds});return delete t.externalIds,t}))))},createEvent:o=>{const n=Object.assign({},o);return t.transformResponse(e.httpClient.post(w.createEvent,n,{token:s}))}}),q=(e,s)=>({saveSchema:(o,n)=>t.transformResponse(e.httpClient.post(A.schemaSave,{schema:o,upgrade:n},{token:s})),deleteSchema:()=>t.transformResponse(e.httpClient.post(A.schemaDelete,{},{token:s})),loadSchema:()=>t.transformResponse(e.httpClient.post(A.schemaLoad,{},{token:s}),(e=>e.schema)),saveNamespace:(o,n,a)=>t.transformResponse(e.httpClient.post(A.nsSave,{namespace:o,oldName:n,schemaName:a},{token:s})),deleteNamespace:(o,n)=>t.transformResponse(e.httpClient.post(A.nsDelete,{name:o,schemaName:n},{token:s})),saveRelationDefinition:(o,n,a,r)=>t.transformResponse(e.httpClient.post(A.rdSave,{relationDefinition:o,namespace:n,oldName:a,schemaName:r},{token:s})),deleteRelationDefinition:(o,n,a)=>t.transformResponse(e.httpClient.post(A.rdDelete,{name:o,namespace:n,schemaName:a},{token:s})),createRelations:o=>t.transformResponse(e.httpClient.post(A.reCreate,{relations:o},{token:s})),deleteRelations:o=>t.transformResponse(e.httpClient.post(A.reDelete,{relations:o},{token:s})),deleteRelationsForResources:o=>t.transformResponse(e.httpClient.post(A.reDeleteResources,{resources:o},{token:s})),hasRelations:o=>t.transformResponse(e.httpClient.post(A.hasRelations,{relationQueries:o},{token:s}),(e=>e.relationQueries)),whoCanAccess:(o,n,a)=>t.transformResponse(e.httpClient.post(A.who,{resource:o,relationDefinition:n,namespace:a},{token:s}),(e=>e.targets)),resourceRelations:o=>t.transformResponse(e.httpClient.post(A.resource,{resource:o},{token:s}),(e=>e.relations)),targetsRelations:o=>t.transformResponse(e.httpClient.post(A.targets,{targets:o},{token:s}),(e=>e.relations)),whatCanTargetAccess:o=>t.transformResponse(e.httpClient.post(A.targetAll,{target:o},{token:s}),(e=>e.relations)),getModified:o=>t.transformResponse(e.httpClient.post(A.getModified,{since:o?o.getTime():0},{token:s}),(e=>e))}),F=(e,s)=>({createOidcApplication:o=>{var n;return t.transformResponse(e.httpClient.post(h.oidcCreate,Object.assign(Object.assign({},o),{enabled:null===(n=o.enabled)||void 0===n||n}),{token:s}))},createSamlApplication:o=>{var n;return t.transformResponse(e.httpClient.post(h.samlCreate,Object.assign(Object.assign({},o),{enabled:null===(n=o.enabled)||void 0===n||n}),{token:s}))},updateOidcApplication:o=>t.transformResponse(e.httpClient.post(h.oidcUpdate,Object.assign({},o),{token:s})),updateSamlApplication:o=>t.transformResponse(e.httpClient.post(h.samlUpdate,Object.assign({},o),{token:s})),delete:o=>t.transformResponse(e.httpClient.post(h.delete,{id:o},{token:s})),load:o=>t.transformResponse(e.httpClient.get(h.load,{queryParams:{id:o},token:s}),(e=>e)),loadAll:()=>t.transformResponse(e.httpClient.get(h.loadAll,{token:s}),(e=>e.apps))}),z=(e,s)=>({getSettings:o=>t.transformResponse(e.httpClient.get(k.settings,{queryParams:{tenantId:o},token:s}),(e=>e)),configureSettings:(o,n)=>t.transformResponse(e.httpClient.post(k.settings,Object.assign(Object.assign({},n),{tenantId:o}),{token:s}))});var J=Object.freeze({__proto__:null,default:{badRequest:"E011001",missingArguments:"E011002",invalidRequest:"E011003",invalidArguments:"E011004",wrongOTPCode:"E061102",tooManyOTPAttempts:"E061103",enchantedLinkPending:"E062503",userNotFound:"E062108"}});const $=o=>{var n,{managementKey:r,publicKey:d}=o,c=e.__rest(o,["managementKey","publicKey"]);const u=a.default(Object.assign(Object.assign({fetch:i},c),{baseHeaders:Object.assign(Object.assign({},c.baseHeaders),{"x-descope-sdk-name":"nodejs","x-descope-sdk-node-version":(null===(n=null===process||void 0===process?void 0:process.versions)||void 0===n?void 0:n.node)||"","x-descope-sdk-version":"1.6.12"})})),{projectId:g,logger:h}=c,v={},f=((e,t)=>({user:S(e,t),project:N(e,t),accessKey:x(e,t),tenant:O(e,t),ssoApplication:F(e,t),sso:M(e,t),jwt:j(e,t),permission:T(e,t),password:z(e,t),role:P(e,t),group:E(e,t),flow:U(e,t),theme:L(e,t),audit:D(e,t),authz:q(e,t)}))(u,r),k=Object.assign(Object.assign({},u),{refresh:async e=>u.refresh(e),management:f,async getKey(e){if(!(null==e?void 0:e.kid))throw Error("header.kid must not be empty");if(v[e.kid])return v[e.kid];if(Object.assign(v,await(async()=>{if(d)try{const e=JSON.parse(d),t=await s.importJWK(e);return{[e.kid]:t}}catch(e){throw null==h||h.error("Failed to parse the provided public key",e),new Error(`Failed to parse public key. Error: ${e}`)}const e=(await u.httpClient.get(`v2/keys/${g}`).then((e=>e.json()))).keys;return Array.isArray(e)?(await Promise.all(e.map((async e=>[e.kid,await s.importJWK(e)])))).reduce(((e,[t,s])=>t?Object.assign(Object.assign({},e),{[t.toString()]:s}):e),{}):{}})()),!v[e.kid])throw Error("failed to fetch matching key");return v[e.kid]},async validateJwt(e){var t;const o=(await s.jwtVerify(e,k.getKey,{clockTolerance:5})).payload;if(o&&(o.iss=null===(t=o.iss)||void 0===t?void 0:t.split("/").pop(),o.iss!==g))throw new s.errors.JWTClaimValidationFailed('unexpected "iss" claim value',"iss","check_failed");return{jwt:e,token:o}},async validateSession(e){if(!e)throw Error("session token is required for validation");try{return await k.validateJwt(e)}catch(e){throw null==h||h.error("session validation failed",e),Error(`session validation failed. Error: ${e}`)}},async refreshSession(e){var t,s;if(!e)throw Error("refresh token is required to refresh a session");try{await k.validateJwt(e);const o=await k.refresh(e);if(o.ok){return await k.validateJwt(null===(t=o.data)||void 0===t?void 0:t.sessionJwt)}throw Error(null===(s=o.error)||void 0===s?void 0:s.errorMessage)}catch(e){throw null==h||h.error("refresh token validation failed",e),Error(`refresh token validation failed, Error: ${e}`)}},async validateAndRefreshSession(e,t){if(!e&&!t)throw Error("both session and refresh tokens are empty");try{return await k.validateSession(e)}catch(e){null==h||h.log(`session validation failed with error ${e} - trying to refresh it`)}return k.refreshSession(t)},async exchangeAccessKey(e,t){if(!e)throw Error("access key must not be empty");let s;try{s=await k.accessKey.exchange(e,t)}catch(e){throw null==h||h.error("failed to exchange access key",e),Error(`could not exchange access key - Failed to exchange. Error: ${e}`)}const{sessionJwt:o}=s.data;if(!o)throw null==h||h.error("failed to parse exchange access key response"),Error("could not exchange access key");try{return await k.validateJwt(o)}catch(e){throw null==h||h.error("failed to parse jwt from access key",e),Error(`could not exchange access key - failed to validate jwt. Error: ${e}`)}},validatePermissions:(e,t)=>k.validateTenantPermissions(e,"",t),getMatchedPermissions:(e,t)=>k.getMatchedTenantPermissions(e,"",t),validateTenantPermissions(e,t,s){if(t&&!m(e,t))return!1;const o=l(e,"permissions",t);return s.every((e=>o.includes(e)))},getMatchedTenantPermissions(e,t,s){if(t&&!m(e,t))return[];const o=l(e,"permissions",t);return s.filter((e=>o.includes(e)))},validateRoles:(e,t)=>k.validateTenantRoles(e,"",t),getMatchedRoles:(e,t)=>k.getMatchedTenantRoles(e,"",t),validateTenantRoles(e,t,s){if(t&&!m(e,t))return!1;const o=l(e,"roles",t);return s.every((e=>o.includes(e)))},getMatchedTenantRoles(e,t,s){if(t&&!m(e,t))return[];const o=l(e,"roles",t);return s.filter((e=>o.includes(e)))}});return t.wrapWith(k,["otp.verify.email","otp.verify.sms","otp.verify.voice","otp.verify.whatsapp","magicLink.verify","enchantedLink.signUp","enchantedLink.signIn","oauth.exchange","saml.exchange","totp.verify","webauthn.signIn.finish","webauthn.signUp.finish","refresh"],p)};$.RefreshTokenCookieName="DSR",$.SessionTokenCookieName="DS",exports.default=$,exports.descopeErrors=J;
//# sourceMappingURL=index.cjs.js.map
